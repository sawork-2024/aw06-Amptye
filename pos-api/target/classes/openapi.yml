openapi: "3.0.0"
info:
  version: 1.0.0
  title: Products
  license:
    name: MIT
paths:
  /users:
    get:
      summary: List all users
      operationId: listUsers
      tags:
        - users
      responses:
        '200':
          description: A paged array of users
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Users"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      tags:
        - user
      operationId: addUser
      summary: Create a user
      description: Creates a user.
      requestBody:
        description: The user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserFields'
        required: true
      responses:
        201:
          description: User created successfully.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        304:
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/{userId}:
    get:
      summary: Info for a specific user
      operationId: showUserById
      tags:
        - user
      parameters:
        - name: userId
          in: path
          required: true
          description: The id of the user to retrieve
          schema:
            type: long
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      tags:
        - user
      operationId: updateUser
      summary: Update a user's details
      description: Updates the user record with the specified details.
      parameters:
        - name: userId
          in: path
          description: The ID of the user.
          required: true
          schema:
            type: long
      requestBody:
        description: The user details to use for the update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserFields'
        required: true
      responses:
        200:
          description: User details found and returned.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        304:
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags:
        - user
      operationId: deleteUser
      summary: Delete an user by ID
      description: Returns the user or a 404 error.
      parameters:
        - name: userId
          in: path
          description: The ID of the user.
          required: true
          schema:
            type: long
      responses:
        200:
          description: User details found and returned.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        304:
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Owner  not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/{userId}/tax_update:
    put:
      tags:
        - user
      operationId: taxUpdateUser
      summary: Update a user's details
      description: Updates the user record with the specified details.
      parameters:
        - name: userId
          in: path
          description: The ID of the user.
          required: true
          schema:
            type: long
      requestBody:
        description: The user details to use for the update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaxFields'
        required: true
      responses:
        200:
          description: User details found and returned.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        304:
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/{userId}/charge:
    put:
      summary: charge for the user's cart
      operationId: chargeUserById
      tags:
        - user
      parameters:
        - name: userId
          in: path
          required: true
          description: The id of the user to retrieve
          schema:
            type: long
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /products:
    get:
      summary: List all products
      operationId: listProducts
      tags:
        - products
      responses:
        '200':
          description: A paged array of products
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Products"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      tags:
        - product
      operationId: addProduct
      summary: Create a product
      description: Creates a product.
      requestBody:
        description: The product
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductFields'
        required: true
      responses:
        201:
          description: Product created successfully.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        304:
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /products/{productId}:
    get:
      summary: Info for a specific product
      operationId: showProductById
      tags:
        - product
      parameters:
        - name: productId
          in: path
          required: true
          description: The id of the product to retrieve
          schema:
            type: long
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      tags:
        - product
      operationId: updateProduct
      summary: Update a product's details
      description: Updates the product record with the specified details.
      parameters:
        - name: productId
          in: path
          description: The ID of the product.
          required: true
          schema:
            type: long
      requestBody:
        description: The product details to use for the update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductFields'
        required: true
      responses:
        200:
          description: Product details found and returned.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        304:
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      tags:
        - product
      operationId: patchProduct
      summary: Change product's quantity
      parameters:
        - name: productId
          in: path
          description: The ID of the product.
          required: true
          schema:
            type: long
      requestBody:
        description: The product details to use for the update.
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                price:
                  type: double
                  minimum: 0
                image:
                  type: string
                categoryId:
                  type: long
                quantity:
                  type: integer
                  format: int32
                  minimum: 0
        required: true
      responses:
        200:
          description: Product details found and returned.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        304:
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags:
        - product
      operationId: deleteProduct
      summary: Delete an product by ID
      description: Returns the product or a 404 error.
      parameters:
        - name: productId
          in: path
          description: The ID of the product.
          required: true
          schema:
            type: long
      responses:
        200:
          description: Product details found and returned.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        304:
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Owner  not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /products/getByName/{productName}:
    get:
      summary: Info for a specific product
      operationId: showProductByName
      tags:
        - products
      parameters:
        - name: productName
          in: path
          required: true
          description: The name of the product to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Products"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /products/search:
    get:
      summary: Info for a specific product
      operationId: searchProductByName
      tags:
        - products
      parameters:
        - name: productName
          in: query
          required: false
          description: The name of the product to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Products"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /items:
    get:
      summary: List all items
      operationId: listItems
      tags:
        - items
      responses:
        '200':
          description: A paged array of items
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Items"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      tags:
        - item
      operationId: addItem
      summary: Create a item
      description: Creates a item.
      requestBody:
        description: The item
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemFields'
        required: true
      responses:
        201:
          description: Item created successfully.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        304:
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /items/{itemId}:
    get:
      summary: Info for a specific item
      operationId: showItemById
      tags:
        - item
      parameters:
        - name: itemId
          in: path
          required: true
          description: The id of the item to retrieve
          schema:
            type: long
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Item"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      tags:
        - item
      operationId: updateItem
      summary: Update a item's details
      description: Updates the item record with the specified details.
      parameters:
        - name: itemId
          in: path
          description: The ID of the item.
          required: true
          schema:
            type: long
      requestBody:
        description: The item details to use for the update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemFields'
        required: true
      responses:
        200:
          description: Item details found and returned.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        304:
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags:
        - item
      operationId: deleteItem
      summary: Delete an item by ID
      description: Returns the item or a 404 error.
      parameters:
        - name: itemId
          in: path
          description: The ID of the item.
          required: true
          schema:
            type: long
      responses:
        200:
          description: Item details found and returned.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        304:
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Owner  not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /items/{itemId}/addone:
    put:
      tags:
        - item
      operationId: addItemById
      parameters:
        - name: itemId
          in: path
          description: The ID of the item.
          required: true
          schema:
            type: long
      responses:
        200:
          description: Item details found and returned.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        304:
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /items/{itemId}/subone:
    put:
      tags:
        - item
      operationId: subItemById
      parameters:
        - name: itemId
          in: path
          description: The ID of the item.
          required: true
          schema:
            type: long
      responses:
        200:
          description: Item details found and returned.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        304:
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /carts:
    get:
      summary: List all carts
      operationId: listCarts
      tags:
        - carts
      responses:
        '200':
          description: A paged array of carts
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Carts"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      tags:
        - cart
      operationId: addCart
      summary: Create a cart
      description: Creates a cart.
      requestBody:
        description: The cart
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartFields'
        required: true
      responses:
        201:
          description: Cart created successfully.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        304:
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /carts/{cartId}:
    get:
      summary: Info for a specific cart
      operationId: showCartById
      tags:
        - cart
      parameters:
        - name: cartId
          in: path
          required: true
          description: The id of the item to retrieve
          schema:
            type: long
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cart"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      tags:
        - cart
      operationId: clearCart
      summary: Clear a cart's items
      description: Clear a cart's items.
      parameters:
        - name: cartId
          in: path
          description: The ID of the cart.
          required: true
          schema:
            type: long
      responses:
        200:
          description: Item details found and returned.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        304:
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Item not found for this cart.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags:
        - cart
      operationId: deleteCart
      summary: Delete an cart by ID
      description: Returns the cart or a 404 error.
      parameters:
        - name: cartId
          in: path
          description: The ID of the cart.
          required: true
          schema:
            type: long
      responses:
        200:
          description: Cart details found and returned.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        304:
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Owner  not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /carts/{cartId}/charge:
    post:
      summary: charge for the cart
      operationId: chargeCartById
      tags:
        - cart
      parameters:
        - name: cartId
          in: path
          required: true
          description: The id of the cart to retrieve
          schema:
            type: long
      requestBody:
        description: The user details to use for the charge.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: double
                  cartId:
                    type: long
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /carts/{cartId}/{productId}:
    post:
      tags:
        - item
      operationId: addProductToCart
      summary: Adds a product to a cart
      parameters:
        - name: cartId
          in: path
          description: The ID of the cart.
          required: true
          schema:
            type: long
        - name: productId
          in: path
          description: The ID of the product.
          required: true
          schema:
            type: long
      responses:
        201:
          description: The item was sucessfully added.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Cart not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /carts/{cartId}/items:
    get:
      summary: List all items of a cart
      operationId: listCartsItems
      tags:
        - items
      parameters:
        - name: cartId
          in: path
          description: The ID of the cart.
          required: true
          schema:
            type: long
      responses:
        '200':
          description: A paged array of items
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Items"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      tags:
        - item
      operationId: addItemToCart
      summary: Adds a item to a cart
      description: Records the details of a new item.
      parameters:
        - name: cartId
          in: path
          description: The ID of the cart.
          required: true
          schema:
            type: long
      requestBody:
        description: The details of the new item.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemFields'
        required: true
      responses:
        201:
          description: The item was sucessfully added.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Cart not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /carts/{cartId}/items/{itemId}:
    get:
      tags:
        - item
      operationId: getCartsItem
      summary: Get a item by ID
      description: Returns the item or a 404 error.
      parameters:
        - name: cartId
          in: path
          description: The ID of the cart.
          required: true
          schema:
            type: long
        - name: itemId
          in: path
          description: The ID of the item.
          required: true
          schema:
            type: long
      responses:
        200:
          description: Item details found and returned.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        304:
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Item not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags:
        - item
      operationId: deleteCartsItem
      summary: Delete an item by ID in a Cart
      description: Returns the item or a 404 error.
      parameters:
        - name: cartId
          in: path
          description: The ID of the cart.
          required: true
          schema:
            type: long
        - name: itemId
          in: path
          description: The ID of the item.
          required: true
          schema:
            type: long
      responses:
        200:
          description: Item details found and returned.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        304:
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Owner  not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      tags:
        - item
      operationId: updateCartsItem
      summary: Update a item's details
      description: Updates the item record with the specified details.
      parameters:
        - name: cartId
          in: path
          description: The ID of the cart.
          required: true
          schema:
            type: long
        - name: itemId
          in: path
          description: The ID of the item.
          required: true
          schema:
            type: long
      requestBody:
        description: The item details to use for the update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemFields'
        required: true
      responses:
        204:
          description: Update successful.
        304:
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Item not found for this cart.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /carts/{cartId}/items/{itemId}/addone:
    put:
      tags:
        - item
      operationId: addCartsItemById
      parameters:
        - name: cartId
          in: path
          description: The ID of the cart.
          required: true
          schema:
            type: long
        - name: itemId
          in: path
          description: The ID of the item.
          required: true
          schema:
            type: long
      responses:
        200:
          description: Item details found and returned.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        304:
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /carts/{cartId}/items/{itemId}/subone:
    put:
      tags:
        - item
      operationId: subCartsItemById
      parameters:
        - name: cartId
          in: path
          description: The ID of the cart.
          required: true
          schema:
            type: long
        - name: itemId
          in: path
          description: The ID of the item.
          required: true
          schema:
            type: long
      responses:
        200:
          description: Item details found and returned.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        304:
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /categories:
    get:
      summary: List all categories
      operationId: listCategories
      tags:
        - categories
      responses:
        '200':
          description: A paged array of categories
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Categories"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      tags:
        - category
      operationId: addCategory
      summary: Create a category
      description: Creates a category.
      requestBody:
        description: The category
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryFields'
        required: true
      responses:
        201:
          description: category created successfully.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        304:
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /categories/{categoryId}:
    get:
      summary: Info for a specific category
      operationId: showCategoryById
      tags:
        - category
      parameters:
        - name: categoryId
          in: path
          required: true
          description: The id of the category to retrieve
          schema:
            type: long
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /orders:
    get:
      summary: List all orders
      operationId: listOrders
      tags:
        - orders
      responses:
        '200':
          description: A paged array of orders
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Orders"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      tags:
        - order
      operationId: addOrder
      summary: Create a order
      description: Creates a order.
      requestBody:
        description: The order
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderFields'
        required: true
      responses:
        201:
          description: order created successfully.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        304:
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /orders/generate:
    post:
      tags:
        - order
      operationId: generateOrder
      summary: Create a order
      description: Creates a order.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderFields"
        required: true
      responses:
        201:
          description: order created successfully.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        304:
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /orders/{orderId}:
    get:
      summary: Info for a specific order
      operationId: showOrderById
      tags:
        - order
      parameters:
        - name: orderId
          in: path
          required: true
          description: The id of the order to retrieve
          schema:
            type: long
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  schemas:
    UserFields:
      type: object
      properties:
        name:
          title: name
          description: The name of the user.
          type: string
          minLength: 1
          maxLength: 30
          pattern: '^[a-zA-Z]*$'
          example: George
        email:
          title: Email
          description: The email of the user.
          type: string
          minLength: 1
          maxLength: 255
          example: 'abc@ef.com'
        pass:
          title: Password
          description: The password of the user.
          type: string
          format: password
          minLength: 1
          maxLength: 80
          example: '123456789'
        money:
          title: Money
          description: The money of the user.
          type: double
          minimum: 0
        address1:
          type: string
          minLength: 1
          maxLength: 20
          pattern: '^[0-9]*$'
          example: '10086'
        address2:
          type: string
          minLength: 1
          maxLength: 20
          pattern: '^[0-9]*$'
          example: '10087'
        contact:
          type: string
          pattern: '^\d{0,20}$'
        symbol:
          type: string
        footer:
          type: string
        image:
          type: string
      required:
        - name
    TaxFields:
      type: object
      properties:
        tax:
          type: boolean
        percentage:
          type: integer
          format: int32
          minimum: 0
          maximum: 100
      required:
        - tax
    User:
      title: User
      allOf:
        - $ref: '#/components/schemas/UserFields'
        - $ref: '#/components/schemas/TaxFields'
        - type: object
          properties:
            id:
              type: long
            cartId:
              type: long
          required:
            - id
    ProductFields:
      type: object
      properties:
        pid:
          type: string
        name:
          type: string
        price:
          type: double
          minimum: 0
        image:
          type: string
        category:
          $ref: '#/components/schemas/Category'
        quantity:
          type: integer
          format: int32
          minimum: 0
      required:
        - name
    Product:
      allOf:
        - $ref: '#/components/schemas/ProductFields'
        - type: object
          properties:
            id:
              type: long
            stock:
              type: boolean
          required:
            - id
    ItemFields:
      type: object
      properties:
        product:
          $ref: '#/components/schemas/Product'
        quantity:
          type: integer
          format: int32
          minimum: 0
      required:
        - product
        - quantity
    Item:
      allOf:
        - $ref: '#/components/schemas/ItemFields'
        - type: object
          properties:
            id:
              type: long
            cartId:
              type: long
          required:
            - id
    CartFields:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Item'
      required:
        - items
    Cart:
      allOf:
        - $ref: '#/components/schemas/CartFields'
        - type: object
          properties:
            id:
              type: long
          required:
            - id
    CategoryFields:
      type: object
      properties:
        name:
          type: string
      required:
        - name
    Category:
      allOf:
        - $ref: '#/components/schemas/CategoryFields'
        - type: object
          properties:
            id:
              type: long
          required:
            - id
    OrderFields:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        cart:
          $ref: '#/components/schemas/Cart'
      required:
        - user
        - cart
    Order:
      allOf:
        - $ref: '#/components/schemas/OrderFields'
        - type: object
          properties:
            id:
              type: long
          required:
            - id
    Users:
      type: array
      items:
        $ref: "#/components/schemas/User"
    Products:
      type: array
      items:
        $ref: "#/components/schemas/Product"
    Items:
      type: array
      items:
        $ref: "#/components/schemas/Item"
    Carts:
      type: array
      items:
        $ref: "#/components/schemas/Cart"
    Categories:
      type: array
      items:
        $ref: "#/components/schemas/Category"
    Orders:
      type: array
      items:
        $ref: "#/components/schemas/Order"
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string